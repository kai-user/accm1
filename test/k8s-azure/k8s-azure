#!/usr/bin/env perl

# Copyright (c) Microsoft Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use 5.012;
use warnings;
use Carp qw(croak);
use Cwd qw(getcwd);
use File::Basename qw(dirname);
use File::Path qw(remove_tree);
use File::Spec::Functions qw(:DEFAULT rel2abs);
import Util;

my $SCRIPT_DIR = rel2abs(dirname(__FILE__));
$Util::Config_From_Env_Prefix = 'K8S_AZURE_';
run_flows(qw/deploy e2e junit_combine/);

use constant {
  ARTIFACTS_DIR      => '_artifacts.kai',
  CLUSTER_PROFILE    => 'cluster.profile',
  DEFAULT_ACCM_IMAGE => 'gcrio.azureedge.net/google_containers/cloud-controller-manager-amd64:v1.8.0',
};

sub deploy {
  for (qw/K8S_AZURE_SUBSID K8S_AZURE_SPID K8S_AZURE_SPSEC/) {
    croak("Environment variable $_ must be specified") unless $ENV{$_};
  }

  my $config       = shift;
  my $name         = $config->{name} || croak('name reqired');
  my $location     = $config->{location} || croak('location reqired');
  my $manifest     = $config->{manifest} || 'linux_ccm';
  my $manifest_dir = $config->{manifest_dir} || catfile($SCRIPT_DIR, 'manifest');
  my $accm_image   = $config->{accmimage} // '';
  my $az_env       = $config->{env} // 'AzurePublicCloud';
  my $spid         = $config->{spid} // '';
  my $spsec        = $config->{spsec} // '';
  my $sshpub       = $config->{sshpub} // '';
  my $password     = $config->{password} // '';
  my $dns_prefix   = ($name =~ tr/\._//dr);

  run_steps([
      step('Create cluster', sub {
          my $ENGINE_FILE = 'kubernetes.ae.json';
          my $engine_apimodel = catfile($manifest_dir, $manifest . '.json');
          croak("Engine apimodel file '$engine_apimodel' not found.") unless (-e $engine_apimodel);
          edit_file($engine_apimodel, sub {
              s/{dnsPrefix}/$dns_prefix/
                  || s/{servicePrincipalClientID}/$spid/
                  || s/{servicePrincipalClientSecret}/$spsec/
                  || s/{keyData}/$sshpub/
                  || s/{adminPassword}/$password/
                  || s/{customCcmImage}/$accm_image/
                  || s/"location":\h*"\K.*"/$location"/
                }, undef, $ENGINE_FILE)
              && mlog("Creating cluster: $name")
              && run_cmd("acs-engine deploy --api-model $ENGINE_FILE"
                . " --azure-env $az_env --subscription-id \$K8S_AZURE_SUBSID --location $location --resource-group $name"
                . " --auth-method client_secret --client-id \$K8S_AZURE_SPID --client-secret \$K8S_AZURE_SPSEC");
            }),
      step('Generate cluster profile.', sub {
          my $kube_config_file = rel2abs('kubeconfig');
          edit_file("_output/$dns_prefix/kubeconfig/kubeconfig.$location.json", undef, undef, $kube_config_file)
              && write_file(CLUSTER_PROFILE, <<EOM);
export KUBECONFIG=$kube_config_file
alias km='ssh k8s-ci\@$dns_prefix.$location.cloudapp.azure.com'
EOM
            }),
  ]);
}

sub e2e {
  my $config            = shift;
  my $type              = $config->{type} || 'smoke';
  my $parallel          = $config->{parallel} // $type =~ /^(default|slow)$/;
  my $skipdeploy        = $config->{skipdeploy};
  my $autorerun         = $config->{autorerun};
  my $global_skip_files = $config->{global_skip_files};
  my $skipclean         = $config->{skipclean} // 1;
  my $accm_image        = $config->{accmimage} || DEFAULT_ACCM_IMAGE;
  my $version_id        = $config->{version_id} || ($accm_image =~ s/.*://r);
  my $subject           = $config->{subject} || _getTime();
  my $customGinkgoFocus = $config->{ginkgoFocus} || '';    # --ginkoFocus parameter, valid when type='_custom'.
  my $skipE2EBuild = $config->{skipbuild} // 0;            # Skip build E2E tests.
  my $location = $config->{location} || `kautil location` || 'southeastasia';    # Test cluster location.
  my $workspace = $config->{workspace} // $ENV{WORKSPACE} // getcwd;

  chomp($location);

  # https://github.com/kubernetes/community/blob/master/contributors/devel/e2e-tests.md#what-runs-in-ci
  # kubernetes-e2e-<provider> runs
  #   all non-[Slow], non-[Serial], non-[Disruptive], non-[Flaky], non-[Feature:.+] tests in parallel.
  # kubernetes-e2e-<provider>-slow runs
  #   all [Slow], non-[Serial], non-[Disruptive], non-[Flaky], non-[Feature:.+] tests in parallel.
  # kubernetes-e2e-<provider>-serial runs
  #   all [Serial] and [Disruptive], non-[Flaky], non-[Feature:.+] tests in serial.
  my %testArgsMap = (
    default => { skip => '[Slow]|[Serial]|[Disruptive]|[Flaky]|[Feature:.+]' },
    serial => {
      focus => '[Serial]|[Disruptive]',
      skip  => '[Slow]|[Flaky]|[Feature:.+]',
    },
    slow => {
      focus => '[Slow]',
      skip  => '[Serial]|[Disruptive]|[Flaky]|[Feature:.+]',
    },
    custom => { focus => $customGinkgoFocus },
    smoke  => { focus => '^$' },
  );

  my @types = keys %testArgsMap;
  croak "Unsupported type: $type, supported: " . join ', ', @types unless grep(/^$type$/, @types);

  # Additional resource group segment, will create group: {K8R_USER}-subject-version-type
  my $e2eUser = $config->{K8R_USER} || "botkai";

  my $version_id_sub = substr $version_id, 0, 7;
  my $name = $config->{name} || "$e2eUser-$subject-$version_id_sub-$type";

  my $artifacts_dir = catfile($workspace,     ARTIFACTS_DIR);
  my $subject_dir   = catfile($artifacts_dir, $name);
  my $e2e_profile   = catfile($subject_dir,   CLUSTER_PROFILE);
  my $report_dir    = catfile($subject_dir,   "report");
  ensure_path($subject_dir);

  my @global_skip_cases;
  if ($global_skip_files) {
    for my $skipfile (split /,/, $global_skip_files) {
      if (-e $skipfile) {
        for (read_file($skipfile)) {
          chomp; s/#.*$//; s/\s+$//; next if /^$/;
          push @global_skip_cases, $_;
        }
      }
    }
  }

  my $e2e_run = sub {
    my ($arg_focus_skip, $report_dir, $parallel) = @_;

    ensure_path($report_dir);

    my $focus_arg;
    $focus_arg = $arg_focus_skip->{focus} || '';
    my $focus_arg_str = _escapeRegex($focus_arg);
    my @skip_arg      = @global_skip_cases;
    push @skip_arg, $arg_focus_skip->{skip} if $arg_focus_skip->{skip};

    my $testArgs = '';
    $testArgs .= " --ginkgo.focus=$focus_arg_str" if $focus_arg_str;
    $testArgs .= ' --ginkgo.skip=' . _escapeRegex(join '|', @skip_arg) if @skip_arg;

    # hack in test-infra made E2E_REPORT_DIR not usable when dump dir exists
    my $env = "E2E_REPORT_DIR=$report_dir";
    $env .= " GINKGO_PARALLEL_NODES=20" if $parallel;
    &_chdirK8SRoot
        && run_cmd(". $e2e_profile && $env ./e2e --get=false -- -v --test --check-version-skew=false"
          . " --dump=$report_dir --test_args='$testArgs'");
  };

  run_steps([
      step('Create test cluster', sub {
          run_cmd("kautil create $name $location", 1);
          chdir($subject_dir)
              && runFlow(\&deploy, { %$config, name => $name, location => $location, accmimage => $accm_image });
            }, sub {$skipdeploy}),
      step('Update cluster profile.', sub {
          my $e2eEnv = <<EOM;
# export KUBERNETES_PROVIDER=azure # no use when conformance=y
export KUBERNETES_CONFORMANCE_TEST=y
export KUBERNETES_CONFORMANCE_PROVIDER=azure
export CLOUD_CONFIG=1 # workaround for the new parameter.
EOM
          edit_file($e2e_profile, undef, sub {$e2eEnv});
            }, sub {$skipdeploy}),
      step('Build E2E tests', sub {
          &_chdirK8SRoot;
          run_cmd('make WHAT=cmd/kubectl && make WHAT=vendor/github.com/onsi/ginkgo/ginkgo && go build hack/e2e.go && ./e2e');
          run_cmd('make WHAT=test/e2e/e2e.test');
            }, sub {$skipE2EBuild}),
      step('Run E2E tests.', sub {
          $e2e_run->($testArgsMap{$type}, $report_dir, $parallel);
          1;    # make test run cmd always pass
            }),
      step('Rerun failed cases', sub {
          my $report_staging = catfile($subject_dir, 'report.staging');
          my $report_rerun   = catfile($subject_dir, 'report.rerun');

          remove_tree($report_staging);
          ensure_path($report_staging);
          my $rerun      = catfile($report_staging, 'failed.txt');
          my $result_xml = catfile($report_staging, 'result.xml');
          runFlow(\&junit_combine, { report_dirs => $report_dir, failed_txt => $rerun, result_xml => $result_xml });

          my @entries = read_file($rerun);
          chomp(@entries);
          my $num     = scalar @entries;
          mlog("Found $num failed cases");
          foreach my $case_entry (@entries) {
            say $case_entry;
          }
          return 1 unless ($num);

          my $MAX_RERUN = 8;
          if ($num > $MAX_RERUN) {
            mlog("Do not support rerun more than $MAX_RERUN cases");
            return 1;
          }

          $e2e_run->({ focus => join '|', @entries }, $report_rerun, 0);

          my $bak = $report_dir . '.origin';
          remove_tree($bak); rename($report_dir, $bak);    # report -> report.bak
          ensure_path($report_dir);                        # write to report

          $result_xml = catfile($report_dir, 'result.xml');
          runFlow(\&junit_combine, { report_dirs => "$report_staging $report_rerun", result_xml => $result_xml });
            }, sub { !$autorerun }),
      step('Clean up', sub {
          run_cmd("kautil delete $name");
            }, sub {$skipclean}),
  ]);
}

sub junit_combine {
  my $config     = shift;
  my $dirs       = $config->{report_dirs} || '';
  my $result_xml = $config->{result_xml} || 'result.xml';
  my $failed_txt = $config->{failed_txt};

  require XML::Simple && import XML::Simple qw(:strict);
  state $xs = XML::Simple->new(KeyAttr => [], ForceArray => 1);
  my %combine;

  for my $dir (split /\s+/, $dirs) {
    for my $file (glob "$dir/*.xml") {
      last if $file =~ /runner/;
      my $cases = $xs->XMLin($file)->{testcase};
      for my $case (@$cases) {
        my $name = $case->{name};
        $combine{$name} = $case if !$combine{$name} || $case->{failure} || !$case->{skipped};
      }
    }
  }

  my $fh;
  if ($failed_txt) {
    open $fh, '>', $failed_txt;
    for (sort keys %combine) {
      say $fh $_ if $combine{$_}->{failure};
    }
    close $fh;
  }

  open $fh, '>:encoding(UTF-8)', $result_xml;
  $xs->XMLout({ testcase => [ @combine{ sort keys %combine } ] }, RootName => 'testsuite', OutputFile => $fh);
  close $fh;
}

sub _escapeRegex { $_[0] =~ s/ /\\s/gr =~ s/(?=(\[|\]|\(|\)))/\\/gr =~ tr/'/./r; }

sub _getTime {
  my ($sec, $min, $hour, $mday) = localtime(time);
  return sprintf("%02d%02d%02d%02d", $mday, $hour, $min, $sec);
}

sub _chdirK8SRoot {
  state $go_path = $ENV{GOPATH} or croak('GOPATH not set, did you source right environment file?');
  state $k8s_root = catfile($go_path, 'src', 'k8s.io/kubernetes');
  mlog("Switching to $k8s_root");
  chdir($k8s_root);
}

BEGIN {
  # Module util, provides flow running and file utils.
  package Util;
  use 5.012;
  use warnings;
  use B qw(svref_2object);
  use Carp qw(confess croak);
  use Exporter qw(import);
  use File::Basename qw(dirname);
  use File::Copy qw(copy);
  use File::Path qw(make_path);
  use Getopt::Long qw(:config gnu_getopt);
  use IPC::Cmd qw(run);
  use Pod::Usage qw(pod2usage);
  use constant { LOGERR => 1, LOGINFO => 2, LOGDEBUG => 3, };
  use vars('$log_prefix');

  our $VERSION = '0.5.0';
  our @EXPORT  = qw(
      mlog run_cmd
      run_flows runFlow run_steps step
      read_file write_file edit_file
      ensure_path
  );

  our $Config_From_Env_Prefix;
  my ($verbosity, $color, $dryrun, %flows, %parameter) = (LOGINFO, 'auto');
  $log_prefix = '';

  sub mlog {
    my $msg = shift;
    my $level = shift // LOGINFO;
    return 1 if $verbosity < $level;
    state $do_log = do {
      if ($color eq 'always' || -t STDOUT && $color ne 'never') {
        require Win32::Console::ANSI if $^O eq 'MSWin32';
        require Term::ANSIColor && import Term::ANSIColor qw(color);
        my ($pre_header, $reset, $err, $info, $debug) = map { color($_) } qw/green reset red yellow white/;
        sub {
          my ($msg, $level) = @_;
          my $pre_message = $level == LOGERR ? $err : $level == LOGINFO ? $info : $debug;
          say $pre_header, $log_prefix, $pre_message, $msg, $reset;
        };
      } else {
        sub { say $log_prefix, shift; };
      }
    };
    $do_log->($msg, $level);
  }

  sub run_cmd {
    my ($cmd, $quiet) = @_;
    mlog "Command Line: $cmd", LOGDEBUG;
    return 1 if $dryrun;
    my ($success, $error_message) = run(command => $cmd, verbose => $quiet ? 0 : $verbosity >= LOGINFO);
    mlog("Command error: $error_message", LOGERR) unless $success || $quiet;
    return $success;
  }

  sub run_flows {
    my @subnames = @_;
    my $package  = caller;
    for my $subname (@subnames) {
      my $fullSubname = "${package}::${subname}";
      defined(&$fullSubname) or confess "sub '$subname' not found";
      $flows{$subname} = \&$fullSubname;
    }

    confess 'No registered flows found.' unless %flows;
    my %opt_config;
    GetOptions(
      'verbose|v' => sub { $verbosity = LOGDEBUG; },
      'help|h' => sub { pod2usage(-exitval => -1, -verbose => $verbosity, -output => '-') },
      'dryrun|n' => sub { $dryrun    = 1; },
      'quiet|q'  => sub { $verbosity = LOGERR; },
      'color|o=s'  => \$color,
      'config|c=s' => \%opt_config,
    ) or exit(1);
    @parameter{ map { (/(.*?)\.(.*)/) ? $2 : $_ } keys %opt_config } = values %opt_config;
    my %env_parameter;
    if ($Config_From_Env_Prefix) {
      for my $name (keys %ENV) {
        if ($name =~ /^$Config_From_Env_Prefix(.*)$/) {
          $env_parameter{ lc $1 } = $ENV{$name};
        }
      }
    }
    %parameter = (%env_parameter, %parameter);

    my $flowname;
    {
      local $" = ', ';
      my @supported_flows = sort keys %flows;
      $flowname = shift @ARGV || (say "Supported flows: @supported_flows") && exit;
      unless ($flows{$flowname}) {
        my @matched = grep {/^$flowname/i} @supported_flows;
        confess(@matched == 0
          ? "No flows match name '$flowname' found"
          : "Multiple flows match name '$flowname' found: '@matched'")
            if (@matched != 1);
        $flowname = $matched[0];
      }
    }
    runFlow($flows{$flowname}) or croak "Flow $flowname failed";
  }

  sub runFlow {
    my $flow_sub       = shift;
    my $flow_parameter = shift // \%parameter;
    my $flow_name      = svref_2object($flow_sub)->GV->NAME;

    local $log_prefix = $log_prefix . '>';
    mlog("Begin flow $flow_name", 3);
    my $ret = &{$flow_sub}($flow_parameter);
    mlog("End flow $flow_name", 3);
    $ret;
  }

  sub run_steps {
    my $steps = shift;
    my $len   = @$steps;
    my $index = 0;
    foreach my $step (@$steps) {
      ++$index;
      my $title = "($index/$len) $step->{name}";
      mlog($title . ' [SKIPPED]'), next if $step->{skip} && &{ $step->{skip} };
      mlog $title;
      confess 'Step failed' unless &{ $step->{run} };
    }
    1;
  }

  sub step { { name => $_[0], run => $_[1], skip => $_[2] }; }

  sub write_file {
    return 1 if $dryrun;
    my ($path, $content) = @_;
    ensure_path(dirname($path));
    open(my $FL, '>', $path) or confess "Error writing to $path: $!.";
    if (ref $content eq 'ARRAY') {
      print $FL @$content;
    } else {
      print $FL $content;
    }
    close $FL;
  }

  sub edit_file {
    return 1 if $dryrun;
    my ($source_file, $line_edit, $eof_edit, $target_file) = @_;
    $target_file //= $source_file;
    mlog("Edit file $source_file -> $target_file", 3);
    unless ($line_edit || $eof_edit) {
      return copy($source_file, $target_file);
    }
    $line_edit //= sub { };
    my @lines = read_file($source_file);
    &$line_edit for @lines;
    push @lines, &$eof_edit if $eof_edit;
    write_file($target_file, \@lines);
  }

  sub read_file {
    my $target_file = shift;
    confess "Could not open file '$target_file'." unless -r $target_file;
    return do { local @ARGV = $target_file; local $/ unless wantarray; readline(); };
  }

  sub ensure_path {
    my $path = shift;
    mlog("Ensure path '$path' exists");
    return 1 if $dryrun;
    -d $path || make_path($path);
  }

  1;
}

__END__
=head1 NAME

k8s-azure - Prepare/Build/Test for kubernetes and run E2E tests on Azure cloud.

=head1 SYNOPSIS

k8s-azure [-n] [-q] [-v] [-c configKey=configValue] <deploy|e2e>

=head1 DESCRIPTION

B<This program> will help setup develop and test environment for Kubernetes.

=head1 OPTIONS

=over 4

=item B<-n>

Dry run.

=item B<-q>

Show less information.

=item B<-v>

Be more verbose.

=item B<-c>

Key configruation.

=back

=head1 FLOWS

=over 16

=item B<deploy>

Deploy a cluster.

=item B<e2e>

Run end-to-end tests.

=item B<junit_combine>

Combine junit test results.


=back

=cut
