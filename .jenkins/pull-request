pipeline {
    agent any
    options {
        timeout(time: 100, unit: 'MINUTES') 
    }
    environment {
        TEST_IMAGE = "$JOB_NAME:$BUILD_NUMBER"
    }
    stages {
        stage ('test run image') {
            steps {
                sh "docker build test/k8s-azure -t $TEST_IMAGE"
            }
        }
        stage ('production image') {
            steps {
                sh 'make clean image'
                withDockerRegistry([credentialsId: 'azure_sp', url: "https://${env.K8S_AZURE_IMAGE_REPOSITORY}"]) {
                    sh 'docker push $(scripts/image-tag.sh)'
                }
            }
        }
        stage ('Clean up') {
            steps {
                sh 'rm -rf _artifacts.kai *.xml'
            }
        }
        stage('E2E Test') {
            environment {
                K8S_AZURE_CMD = 'k8s-azure e2e -v -caccmimage=$($WORKSPACE/scripts/image-tag.sh)'
                K8S_AZURE_skipbuild = 1
                K8S_AZURE_autorerun = 1
                K8S_AZURE_skipclean = 0
                K8S_AZURE_global_skip_files = "$WORKSPACE/.jenkins/skip.txt"
                K8S_AZURE_subject = "PULLREQUEST_B${BUILD_NUMBER}_PR${ghprbPullId}"
                K8S_AZURE_version_id = "$ghprbActualCommit"
            }
            steps {
                withDockerContainer ([image: "${env.TEST_IMAGE}"]) {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'azure_sp', usernameVariable: 'K8S_AZURE_SPID', passwordVariable: 'K8S_AZURE_SPSEC']]) {
                        sh "${env.K8S_AZURE_CMD} -ctype=default"
                    }
                }
            }
        }
        stage('Collect') {
            steps {
                withDockerContainer ([image: "${env.TEST_IMAGE}"]) {
                    sh "cd _artifacts.kai && K8S_AZURE_REPORT_DIRS=\$(echo */report) k8s-azure junit_combine"
                    sh 'cp _artifacts.kai/result.xml $ghprbActualCommit.xml'
                    azureUpload storageCredentialId: 'report', storageType: 'blobstorage', containerName: 'main', filesPath: "${env.ghprbActualCommit}.xml", fileShareName: ''
                }
             }
            post {
                always {
                    junit "_artifacts.kai/result.xml"
                }
            }
        }
    }
}